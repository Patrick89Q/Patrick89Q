library(IDDA)
df <- IDDA::state.long |>
filter(State=="Iowa")
library(IDDA)
library(plotly)
library(tidyverse)
df <- IDDA::state.long |>
filter(State=="Iowa")
df
df <- IDDA::state.long |>
filter(State=="Iowa") |>
arrange(DATE)
df
df <- IDDA::state.long |>
filter(State=="Iowa") |>
arrange(DATE) |>
mutate(Y_infected =infected-lag(Infected))
df <- IDDA::state.long |>
filter(State=="Iowa") |>
arrange(DATE) |>
mutate(Y_infected =Infected-lag(Infected))
df <- IDDA::state.long |>
filter(State=="Iowa") |>
arrange(DATE) |>
mutate(Y_infected =Infected-lag(Infected)) |>
filter(!is.na(Y_infected))
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line()
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line() +
theme(legend.position = "bottom")
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line() +
labs(x="Date",y="Count",title = "Daily New Infected Cases in IOwa")
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line() +
labs(x="Date",y="Count",title = "Daily New Infected Cases in Iowa")
theme(legend.position = "bottom") + theme_light()
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line() +
labs(x="Date",y="Count",title = "Daily New Infected Cases in Iowa")+
theme(legend.position = "bottom") + theme_light()
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line(linewidth=2) +
labs(x="Date",y="Count",title = "Daily New Infected Cases in Iowa")+
theme(legend.position = "bottom") + theme_light()
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line(linewidth=1.5) +
labs(x="Date",y="Count",title = "Daily New Infected Cases in Iowa")+
theme(legend.position = "bottom") + theme_light()
df |>
ggplot(aes(DATE,Y_infected)) +
geom_line(linewidth=1.5, color="firebrick") +
labs(x="Date",y="Count",title = "Daily New Infected Cases in Iowa")+
theme(legend.position = "bottom") + theme_light()
IDDA::fore
IDDA::fore[c("mean","lower","upper")]
IDDA::fore[c("mean","lower","upper")] |> as.data.frame()
ci <- IDDA::fore[c("mean","lower","upper")] |> as.data.frame()
ci
names(ci) <- c("mean","lower","upper")
ci
ci$date <- tail(df$DATE,1)
ci
tail(df$DATE,1)
ci$date <- tail(df$DATE,1) + c(1:length(IDDA::fore$mean))
ci
p <- df |>
ggplot(aes(DATE,Y_infected)) +
geom_line(linewidth=1.5, color="firebrick") +
labs(x="Date",y="Count",title = "Daily New Infected Cases in Iowa")+
theme(legend.position = "bottom") + theme_light()
p  + geom_line(data = ci,aes(date, mean))
p  + geom_line(data = ci,aes(date, mean), linewidth=2,color="darkgreen")
p  + geom_line(data = ci,aes(date, mean), linewidth=2,color="darkgreen", linetype="dashed")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,color="darkgreen", linetype="dashed")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries",
linetype="dashed")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries",
linetype="dot")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries",
linetype="dot")
library(IDDA)
library(plotly)
library(tidyverse)
# Loading the dataset
df <- IDDA::state.long |>
filter(State=="Iowa") |>
arrange(DATE) |>
mutate(Y_infected =Infected-lag(Infected)) |>
filter(!is.na(Y_infected))
# Time series plot of disease cases
p <- df |>
ggplot(aes(DATE,Y_infected)) +
geom_line(linewidth=1.5, color="firebrick") +
labs(x="Date",y="Count",title = "Daily New Infected Cases in Iowa")+
theme(legend.position = "bottom") + theme_light()
ci <- IDDA::fore[c("mean","lower","upper")] |> as.data.frame()
names(ci) <- c("mean","lower","upper")
ci$date <- tail(df$DATE,1) + c(1:length(IDDA::fore$mean))
ci
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries",
linetype="dot")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries",
linetype="dashed")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries",
linetype="line")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_color_manual(" ",values = "red")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_x_date(limits =as.Date(c("2020-10-10","2021-01-15")),breaks = waiver())+
scale_color_manual(" ",values = "red")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_x_date(limits =as.Date(c("2020-10-10","2021-01-15")),breaks = "1 month")+
scale_color_manual(" ",values = "red")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_x_date(limits =as.Date(c("2020-10-10","2021-01-15")),breaks = "1 week")+
scale_color_manual(" ",values = "red")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_x_date(limits =as.Date(c("2020-10-10","2021-01-15")),date_breaks =  "1 week")+
scale_color_manual(" ",values = "red")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_x_date(limits =as.Date(c("2020-10-10","2021-01-15")),date_breaks =  "1 month")+
scale_color_manual(" ",values = "red")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_x_date(limits =as.Date(c("2020-10-10","2021-01-15")),date_breaks =  "5 days")+
scale_color_manual(" ",values = "red")
p  + geom_line(data = ci,aes(date, mean), linewidth=0.8,
color="darkgreen",
key_glyph="timeseries") +
scale_x_date(limits =as.Date(c("2020-10-10","2021-01-15")),date_breaks =  "7 days")+
scale_color_manual(" ",values = "red")
cases_1000 <- df |>
group_by(State)
cases_1000
cases_1000 <- df |>
group_by(State)
cases_1000
cases_1000 <- df |>
select(-Y_infected) |>
group_by(State)
cases_1000 <- df |>
select(-Y_infected) |>
group_by(State) |>
summarise(total_pop=sum(pop, na.rm = TRUE))
cases_1000
select(-Y_infected) |>
cases_1000 <- IDDA::state.long |>
# select(-Y_infected) |>
group_by(State) |>
summarise(total_pop=sum(pop, na.rm = TRUE))
IDDA::state.long
cases_1000 <- IDDA::state.long |>
# select(-Y_infected) |>
group_by(State) |>
summarise(total_pop=sum(pop, na.rm = TRUE))
cases_1000
cases_1000 <- IDDA::state.long |>
# select(-Y_infected) |>
group_by(State) |>
summarise(total_pop=sum(pop, na.rm = TRUE),
total_infected=sum( Infected, na.rm = TRUE),
total_Deaths=sum(Death,na.rm = TRUE))
cases_1000
library(epiR)
cases_1000 |>
select(total_pop, total_infected)
cases_1000 |>
select(State,total_pop, total_infected)
to_use <- cases_1000 |>
select(State,total_pop, total_infected)
datset_temp <- as.matrix(to_use$total_infected, to_use$total_pop)
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=1000)
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=1000, design = 1, conf.level = 0.95)*100
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=1000, design = 1, conf.level = 0.95)
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=10000, design = 1, conf.level = 0.95)
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=10000000, design = 1, conf.level = 0.95)
library(epiR)
to_use <- cases_1000 |>
select(State,total_pop, total_infected)
to_use
cases_1000 <- IDDA::state.long |>
# select(-Y_infected) |>
group_by(State) |>
summarise(total_pop=sum(pop, na.rm = TRUE),
total_infected=sum( Infected, na.rm = TRUE),
total_Deaths=sum(Death,na.rm = TRUE))
cases_1000
to_use <- cases_1000 |>
select(State,total_pop, total_infected)
to_use
datset_temp <- as.matrix(to_use$total_infected, to_use$total_pop)
datset_temp
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=10000000, design = 1, conf.level = 0.95)
datset_temp
datset_temp <- as.matrix(cbind(to_use$total_infected, to_use$total_pop))
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=10000000, design = 1, conf.level = 0.95)
epi_tem
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=10000000, design = 1, conf.level = 0.95)*100
epi_tem
dat.df <- cbind(cases_1000, epi_tem)
dat.df
dat.df
dat.df
dat.df <- as.data.frame(cbind(cases_1000, epi_tem))
dat.df
dat.df <- as.data.frame(cbind(cases_1000, epi_tem)) |>
arrange(est)
dat.df
dat.df <- as.data.frame(cbind(cases_1000, epi_tem)) |>
arrange(est) |>
mutate(rank=1:nrow())
dat.df <- as.data.frame(cbind(cases_1000, epi_tem)) |>
arrange(est) |>
mutate(rank=1:nrow(.))
dat.df <- as.data.frame(cbind(cases_1000, epi_tem)) |>
mutate(rank=1:nrow())
mutate(rank=1:length()
dat.df <- as.data.frame(cbind(cases_1000, epi_tem)) |>
dat.df <- as.data.frame(cbind(cases_1000, epi_tem))
dat.df$rank <- 1:nrow(dat.df)
dat.df
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
scale_x_continuous(limits = c(0,25), breaks = dat.df$rank, labels = dat.df$rname, name = "Region") +
scale_y_continuous(limits = c(0,100), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
scale_x_continuous(limits = c(0,25), breaks = dat.df$rank, labels = dat.df$rname, name = "Region") +
scale_y_continuous(limits = c(0,100), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
scale_x_continuous(limits = c(0,50), breaks = dat.df$rank, labels = dat.df$State, name = "Region") +
scale_y_continuous(limits = c(0,100), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
scale_x_continuous(limits = c(0,50), breaks = dat.df$rank, labels = dat.df$State, name = "Region") +
scale_y_continuous(limits = c(0,50), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
scale_x_continuous(limits = c(0,10000), breaks = dat.df$rank, labels = dat.df$State, name = "Region") +
scale_y_continuous(limits = c(0,10000), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1)
dat.df
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
scale_x_continuous(limits = c(0,49), breaks = dat.df$rank, labels = dat.df$State, name = "Region") +
scale_y_continuous(limits = c(0,2), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
epi_tem <- epi.conf(dat = datset_temp,ctype = "prevalence", method = "exact",N=1000, design = 1, conf.level = 0.95)*100
dat.df <- as.data.frame(cbind(cases_1000, epi_tem))
dat.df$rank <- 1:nrow(dat.df)
dat.df
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point() +
scale_x_continuous(limits = c(0,49), breaks = dat.df$rank, labels = dat.df$State, name = "Region") +
scale_y_continuous(limits = c(0,2), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(color="red") +
scale_x_continuous(limits = c(0,49), breaks = dat.df$rank, labels = dat.df$State, name = "Region") +
scale_y_continuous(limits = c(0,2), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dat.df
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(color="red") +
scale_x_continuous(limits = c(0,49), breaks = dat.df$rank, labels = dat.df$State,
name = "Region") +
scale_y_continuous(limits = c(0,2), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(color="red", size=2) +
scale_x_continuous(limits = c(0,49), breaks = dat.df$rank, labels = dat.df$State,
name = "Region") +
scale_y_continuous(limits = c(0,2), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = dat.df, aes(x = rank, y = est)) +
theme_bw() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.1) +
geom_point(color="red", size=4) +
scale_x_continuous(limits = c(0,49), breaks = dat.df$rank, labels = dat.df$State,
name = "Region") +
scale_y_continuous(limits = c(0,2), name = "Cases per 100 individuals at risk") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
cases_1000 <- IDDA::state.long |>
# select(-Y_infected) |>
group_by(State) |>
summarise(total_pop=sum(pop, na.rm = TRUE),
total_infected=sum( Infected, na.rm = TRUE),
total_Deaths=sum(Death,na.rm = TRUE))
cases <- IDDA::state.long |>
group_by(DATE)
cases
summarise(total_cases =sum(Infected, na.rm=TRUE)
cases <- IDDA::state.long |>
IDDA::state.long
cases <- IDDA::state.long |>
group_by(DATE) |>
summarise(total_cases =sum(Infected, na.rm=TRUE))
cases
cases <- IDDA::state.long |>
group_by(DATE) |>
summarise(total_cases =sum(Infected, na.rm=TRUE)) |>
arrange(DATE)
cases
IDDA::state.long |>
ggplot(aes(x=DATE)) + geom_histogram()
IDDA::state.long |>
ggplot(aes(x=DATE)) + geom_histogram(binwidth = 7)
IDDA::state.long |>
ggplot(aes(x=DATE)) + geom_histogram(binwidth = 7)+
scale_x_date(breaks = date_breaks("1 week"), labels = date_format("%d %b"))
IDDA::state.long |>
ggplot(aes(x=DATE)) + geom_histogram(binwidth = 7)+
scale_x_date(breaks = date_breaks("1 week"), labels = date_format("%d %b"))
library(scales)
IDDA::state.long |>
ggplot(aes(x=DATE)) + geom_histogram(binwidth = 7)+
scale_x_date(breaks = date_breaks("1 week"), labels = date_format("%d %b"))
IDDA::state.long |>
ggplot(aes(x=DATE)) + geom_histogram(binwidth = 7)+
scale_x_date(breaks = date_breaks("7 week"), labels = date_format("%d %b"))
ggplot(data = cases, aes(x = DATE)) +
theme_bw() +
geom_histogram(binwidth = 7, colour = "gray", fill = "dark blue", size = 0.1) +
geom_density(aes(y = after_stat(density) * (nrow(cases) * 7)), colour = "red") +
scale_x_date(breaks = date_breaks("7 days"), labels = date_format("%d %b"),
name = "Date") +
scale_y_continuous(breaks = seq(from = 0, to = 30, by = 5), limits = c(0,30), name = "Number of cases") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = cases, aes(x = DATE)) +
theme_bw() +
geom_histogram(binwidth = 7, colour = "gray", fill = "dark blue", size = 0.1) +
geom_density(aes(y = after_stat(density) * (nrow(cases) * 7)), colour = "red") +
scale_x_date(breaks = date_breaks("2 weeks"), labels = date_format("%d %b"),
name = "Date") +
scale_y_continuous(breaks = seq(from = 0, to = 30, by = 5), limits = c(0,30), name = "Number of cases") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(reticulate)
reticulate::repl_python()
import pandas as pd
import tensorflow as tf
